worker_processes auto;
worker_rlimit_nofile 4096;

events {
    worker_connections 4096;
    multi_accept on;
    use epoll;
}

http {
    # Параметры Nginx
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    server_tokens off;
    keepalive_timeout 65s;
    keepalive_requests 10000;
    
    # Оптимизация производительности
    output_buffers 4 32k;
    postpone_output 1460;
    sendfile_max_chunk 512k;
    directio 4m;
    directio_alignment 512;

    # Время соединений
    proxy_read_timeout 60s;
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;

    # Заголовки безопасности
    add_header X-Content-Type-Options nosniff always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "ALLOWALL" always;
    add_header Content-Security-Policy "frame-ancestors https://t.me https://web.telegram.org https://web.telegram.org.kz" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(self), accelerometer=(self)" always;

    # Параметры сжатия файлов
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript
               application/xml application/xml+rss application/atom+xml
               application/xhtml+xml image/svg+xml application/font-woff
               application/font-woff2;
    
    # Brotli сжатие
    brotli on;
    brotli_comp_level 6;
    brotli_min_length 1000;
    brotli_types text/plain text/css application/json application/javascript
               application/xml application/xml+rss application/atom+xml
               application/xhtml+xml image/svg+xml application/font-woff
               application/font-woff2;

    # Ускорение отдачи статических файлов
    open_file_cache max=10000 inactive=300s;
    open_file_cache_valid 300s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    
    # Кеширование прокси
    proxy_cache_path /var/cache/nginx/proxy levels=1:2 keys_zone=proxy_cache:10m max_size=1g inactive=60m;
    proxy_temp_path /var/cache/nginx/temp;
    
    # Кеширование статических файлов
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:100m max_size=10g inactive=7d;

    # Разрешённые Origins для CORS (добавлены dev-источники и Telegram)
    map $http_origin $cors_origin {
        default "";
        "https://vmestedate.ru"            $http_origin;
        "http://185.77.216.40:4178"        $http_origin;
        "http://localhost:4178"             $http_origin;
        "http://188.170.74.211:4178"        $http_origin;
        # Telegram Web App домены
        "https://t.me"                     $http_origin;
        "https://web.telegram.org"          $http_origin;
        "https://web.telegram.org.kz"      $http_origin;
        "https://web.telegram.org.a"       $http_origin;
        "https://web.telegram.org.b"       $http_origin;
        "https://web.telegram.org.c"       $http_origin;
        "https://web.telegram.org.d"       $http_origin;
        "https://web.telegram.org.e"       $http_origin;
        "https://web.telegram.org.f"       $http_origin;
        "https://web.telegram.org.g"       $http_origin;
        "https://web.telegram.org.h"       $http_origin;
        "https://web.telegram.org.i"       $http_origin;
        "https://web.telegram.org.j"       $http_origin;
        "https://web.telegram.org.k"       $http_origin;
        "https://web.telegram.org.l"       $http_origin;
        "https://web.telegram.org.m"       $http_origin;
        "https://web.telegram.org.n"       $http_origin;
        "https://web.telegram.org.o"       $http_origin;
        "https://web.telegram.org.p"       $http_origin;
        "https://web.telegram.org.q"       $http_origin;
        "https://web.telegram.org.r"       $http_origin;
        "https://web.telegram.org.s"       $http_origin;
        "https://web.telegram.org.t"       $http_origin;
        "https://web.telegram.org.u"       $http_origin;
        "https://web.telegram.org.v"       $http_origin;
        "https://web.telegram.org.w"       $http_origin;
        "https://web.telegram.org.x"       $http_origin;
        "https://web.telegram.org.y"       $http_origin;
        "https://web.telegram.org.z"       $http_origin;
    }

    # Ограничения одновременных соединений и защита от DDoS
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
    limit_req_zone  $binary_remote_addr zone=req_limit:10m rate=5r/s;
    
    # Дополнительные зоны для защиты от DDoS
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=static_limit:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=strict_limit:10m rate=1r/s;
    
    # Защита от медленных атак
    limit_conn_zone $server_name zone=perserver:10m;

    # Upstream для клиентского приложения
    upstream client_backend {
        server client:4178;
    }

    # Upstream для WebSocket сервиса
    upstream ws_backend {
        server ws:7000;
    }

    # Логирование статистики
    log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" "$request_time"';
    access_log /var/log/nginx/access.log main buffer=16k flush=1m;
    error_log /var/log/nginx/error.log warn;

    # HTTP сервер - редирект на HTTPS
    server {
        listen 80;
        listen [::]:80;
        server_name vmestedate.ru;

        return 301 https://$server_name$request_uri;
    }

    # HTTPS сервер
    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        # Домен
        server_name vmestedate.ru;

        # SSL настройки
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_trusted_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_protocols TLSv1.3 TLSv1.2;
        ssl_ecdh_curve X25519:secp384r1;
        ssl_ciphers 'DEFAULT';
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;

        # HTTP/2 optimization
        ssl_early_data on;
        
        # Глобальные настройки клиента
        client_body_timeout 10s;
        client_header_timeout 10s;
        client_max_body_size 100m;

        # Прокси для API с защитой от DDoS
        location /api/ {
            # Защита от DDoS для API
            limit_conn conn_limit 20;
            limit_req zone=api_limit burst=20 nodelay;
            limit_conn perserver 100;
            
            proxy_http_version 1.1;
            proxy_pass http://api:3000/;

            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS заголовки
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, Origin, X-Requested-With, X-Spectre-Telegram-Id, X-Captcha-Token" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
            add_header Vary "Origin" always;
            
            # Таймауты для API
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # Предобработка preflight запросов
            if ($request_method = OPTIONS) {
                return 204;
            }
        }


        # WebSocket для Socket.IO с защитой от DDoS
        location /socket.io/ {
            # Защита от DDoS для WebSocket
            limit_conn conn_limit 10;
            limit_req zone=strict_limit burst=5 nodelay;
            limit_conn perserver 50;
            
            proxy_http_version 1.1;
            proxy_pass http://ws_backend/socket.io/;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-NginX-Proxy false;

            # Увеличиваем таймауты для WebSocket
            proxy_read_timeout 3600s;
            proxy_connect_timeout 60s;
            proxy_send_timeout 3600s;
            proxy_buffering off;
            
            # Дополнительные настройки для WebSocket
            proxy_cache off;
            proxy_no_cache 1;
            proxy_cache_bypass 1;
        }

        # WebSocket для клиентского приложения
        location /ws/ {
            limit_conn conn_limit 6;
            limit_req zone=req_limit burst=3 nodelay;

            proxy_http_version 1.1;
            proxy_pass http://client_backend/;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-NginX-Proxy false;

            proxy_read_timeout 360s;
            proxy_connect_timeout 360s;
            proxy_send_timeout 360s;

            proxy_buffering off;
        }

        # Оптимизированное кеширование статических файлов
        location ~* \.(js|css|png|jpg|jpeg|webm|gif|mp3|mp4|ogg|ico|svg|woff|woff2|eot|ttf|otf|map|webp|avif|json|xml|wasm|webmanifest)$ {
            # Защита от DDoS для статических файлов
            limit_conn conn_limit 100;
            limit_req zone=static_limit burst=50 nodelay;
            limit_conn perserver 200;
            
            # Попытка отдать файл напрямую из nginx
            try_files $uri @static_proxy;
            
            # Кеширование в браузере
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Vary "Accept-Encoding";
            
            # Сжатие статических файлов
            gzip_static on;
            
            # Заголовки для оптимизации
            add_header X-Content-Type-Options nosniff;
            add_header X-Frame-Options "ALLOWALL";
        }
        
        # Прокси для статических файлов если не найдены локально
        location @static_proxy {
            proxy_http_version 1.1;
            proxy_pass http://client_backend;

            proxy_set_header Host $host;
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Кеширование на уровне nginx
            proxy_cache static_cache;
            proxy_cache_valid 200 7d;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_lock on;
            proxy_cache_key $scheme$proxy_host$request_uri;
            
            # Заголовки кеширования
            add_header X-Cache-Status $upstream_cache_status;
        }

        # Обработка favicon.ico
        location = /favicon.ico {
            proxy_pass http://client_backend/favicon.ico;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Защита от загрузки больших файлов
        location ~* \.(php|jsp|asp|aspx)$ {
            deny all;
            return 403;
        }
        
        # Блокировка подозрительных запросов
        location ~* (wp-admin|wp-login|xmlrpc|admin|phpmyadmin) {
            deny all;
            return 403;
        }
        
        # Основной контент (клиентское приложение) с защитой от DDoS
        location / {
            # Защита от DDoS для основного контента
            limit_conn conn_limit 6;
            limit_req zone=req_limit burst=3 nodelay;
            limit_conn perserver 50;
            
            # Защита от медленных атак

            proxy_http_version 1.1;
            proxy_pass http://client_backend/;

            proxy_set_header Host $host;
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_intercept_errors on;
            
            # Таймауты
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # Информация ошибки в виде html
        location = /error.html {
            root /usr/share/nginx/html;
            ssi on;
            internal;
        }

        # Глобальная защита от DDoS
        limit_conn conn_limit 70;
        limit_req zone=req_limit burst=50 nodelay;
        limit_conn perserver 200;
        
        # COEP/CORP настройки для избежания блокировок внешних ресурсов (например, виджета капчи)
        proxy_hide_header Cross-Origin-Embedder-Policy;
        add_header Cross-Origin-Embedder-Policy "credentialless" always;
        add_header Cross-Origin-Resource-Policy "same-site" always;
        
        # Дополнительная защита от DDoS
        client_body_buffer_size 1k;
        client_header_buffer_size 1k;
        large_client_header_buffers 2 1k;
        
        # Защита от медленных атак
        send_timeout 10s;
        reset_timedout_connection on;

        # Обработка ошибок
        error_page 400 401 403 404 500 502 503 504 /error.html;
    }
}